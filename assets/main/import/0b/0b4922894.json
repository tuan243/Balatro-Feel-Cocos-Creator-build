[1,["b3+pSbgchHOaxGLHSV/vnq","19y4+h0HhNr6D5hNnVfNiL@f9941","090Br88p9F9pD+8IjxwWrB@6c48a","19y4+h0HhNr6D5hNnVfNiL@6c48a","81AuZN8j5IQZns/h7BYw0G","ddo+8YlO1ELbt44NCZAVo3@f9941","57jzgNIN9DJYG+P3z5a4Oz@f9941","bfrml9kE5PvLmM9nQDhJ7p","57jzgNIN9DJYG+P3z5a4Oz@6c48a","5c8vr8IbNMeagtsgkIFTls@6c48a","fcJ0XHfFVPOr7llOuffZ4L","a4NTxXvi5HpY5eSC3xEvEp@6c48a","f5zw+GhqRF2ZscQRZFVlly","ddo+8YlO1ELbt44NCZAVo3@6c48a","02hYUqcbFKNImmbTIZzc+a","3dcxoBo+lMSqYQVCTBz7OJ","a4NTxXvi5HpY5eSC3xEvEp@f9941","090Br88p9F9pD+8IjxwWrB@f9941"],["node","root","asset","_textureSource","_spriteFrame","_parent","_effectAsset","data","_cameraComponent","scene","_customMaterial","sampleTexture","cardVisualPrefab","visualShadow","sprite","tiltAnchor","shakeAnchor","source"],[["cc.Node",["_name","_layer","_id","_active","_objFlags","__editorExtras__","_components","_parent","_children","_prefab","_lpos"],-3,9,1,2,4,5],"cc.SpriteFrame",["cc.UITransform",["node","_contentSize","__prefab"],3,1,5,4],["cc.Sprite",["_sizeMode","node","_spriteFrame","_color","__prefab","_customMaterial"],2,1,6,5,4,6],["cc.RealKeyframeValue",["interpolationMode","rightTangent","rightTangentWeight","leftTangent","leftTangentWeight","value"],-3],["cc.Widget",["_alignFlags","_top","_bottom","_originalWidth","_originalHeight","node"],-2,1],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_parent","_components","_lpos"],2,1,2,5],["cc.Node",["_name","_layer","_parent","_components","_prefab"],1,1,12,4],["cc.Layout",["_resizeMode","_layoutType","node"],1,1],["042047B+lFPGJc3kfNM67Rt",["node"],3,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.TargetInfo",["localID"],2],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-2,2],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyColorHDR","_groundAlbedoHDR"],3,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.SkinInfo",["_enabled"],2],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["cc.Camera",["_projection","_orthoHeight","_near","_far","_visibility","node","_color"],-2,1,5],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["da7d38bDQlLYoD+UxoY87+Y",["node","__prefab","cardVisualPrefab"],3,1,4,6],["cc.EffectAsset",["_name","combinations","shaders","techniques"],-1],["e3000sOeyJEUoPsnLZ5gLqJ",["followSpeed","rotationAmount","autoTiltAmount","manualTiltAmount","tiltSpeed","scaleOnHover","scaleOnSelect","swapRotationAngle","swapTransition","positioningInfluence","node","__prefab","shakeAnchor","tiltAnchor","sprite","visualShadow","materials","cardSfs","positioningCurve","rotationCurve"],-7,1,4,1,1,1,1,3,3,4,4],["cc.CurveRange",["mode","spline"],2,4],["cc.RealCurve",["_times","_values"],2,9],["84578QXfxBBzq51NCkUi+0s",["node","__prefab","source"],3,1,4,1]],[[18,0,1,2,2],[2,0,1,1],[33,0,2],[0,0,1,7,8,6,10,3],[0,4,5,7,9,3],[12,0,2],[13,0,1,2,3,4,5,4],[16,0,1,2,3],[17,0,1,2,3],[15,0,1,2,3,4,5,5],[0,0,1,7,6,3],[2,0,2,1],[2,0,2,1,1],[0,0,1,7,8,6,9,3],[2,0,1],[5,0,3,4,5,4],[32,0,2],[35,0,1,2,3,5],[37,0,1,2],[38,0,1,2],[4,5,1,2,3,4,6],[6,0,2],[0,0,1,8,6,10,3],[0,0,1,2,8,6,10,4],[0,0,3,1,7,6,4],[0,0,1,6,9,3],[0,0,1,8,6,9,3],[0,0,1,7,6,9,10,3],[7,0,1,2,3,2],[8,0,1,2,3,4,3],[9,0,1,2,3],[10,0,1],[11,0,1,1],[5,0,1,2,5,4],[3,0,1,3,5,2,2],[3,0,1,2,2],[3,0,1,4,3,2,2],[3,0,1,4,2],[14,0,1,2,3,4,5,6],[19,0,1,2,3,2],[20,0,1,2,3,4,5,6,7,1],[21,0,1,1],[22,0,1,1],[23,1],[24,1],[25,1],[26,0,2],[27,1],[28,1],[29,0,1,2,3,4,5,6,6],[30,0,1,2,3,5],[31,0,1,2,3,4],[34,0,1,2,1],[36,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,11],[4,0,1,2,3,5],[4,0,5,2,4,5],[4,0,1,3,4,5],[39,0,1,2,1]],[[[{"name":"12d","rect":{"x":8,"y":13,"width":521,"height":748},"offset":{"x":2,"y":-5},"originalSize":{"width":533,"height":764},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-260.5,-374,0,260.5,-374,0,-260.5,374,0,260.5,374,0],"indexes":[0,1,2,2,1,3],"uv":[8,751,529,751,8,3,529,3],"nuv":[0.0150093808630394,0.003926701570680628,0.9924953095684803,0.003926701570680628,0.0150093808630394,0.9829842931937173,0.9924953095684803,0.9829842931937173],"minPos":{"x":-260.5,"y":-374,"z":0},"maxPos":{"x":260.5,"y":374,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[2]],[[{"name":"13d","rect":{"x":6,"y":12,"width":524,"height":750},"offset":{"x":1.5,"y":-5},"originalSize":{"width":533,"height":764},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-262,-375,0,262,-375,0,-262,375,0,262,375,0],"indexes":[0,1,2,2,1,3],"uv":[6,752,530,752,6,2,530,2],"nuv":[0.01125703564727955,0.002617801047120419,0.9943714821763602,0.002617801047120419,0.01125703564727955,0.9842931937172775,0.9943714821763602,0.9842931937172775],"minPos":{"x":-262,"y":-375,"z":0},"maxPos":{"x":262,"y":375,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[3]],[[[21,"main"],[22,"Layout",33554432,[-4,-5,-6,-7,-8,-9,-10,-11],[[1,-1,[5,880,100]],[30,1,1,-2],[31,-3]],[1,0,-79.377,0]],[23,"Canvas",33554432,"beI88Z2HpFELqR4T5EMHpg",[-16,-17,1,-18,-19,-20],[[1,-12,[5,1280,720]],[32,-14,-13],[33,45,5.684341886080802e-14,5.684341886080802e-14,-15]],[1,640,360.00000000000006,0]],[10,"background",33554432,2,[[1,-21,[5,1280,720]],[34,0,-22,[4,2486123520],0,1],[15,45,40,36,-23]]],[5,["6fKL5Uz6xGgL/K84qa7Syf"]],[5,["6fKL5Uz6xGgL/K84qa7Syf"]],[5,["6fKL5Uz6xGgL/K84qa7Syf"]],[5,["6fKL5Uz6xGgL/K84qa7Syf"]],[5,["6fKL5Uz6xGgL/K84qa7Syf"]],[5,["6fKL5Uz6xGgL/K84qa7Syf"]],[5,["6fKL5Uz6xGgL/K84qa7Syf"]],[5,["6fKL5Uz6xGgL/K84qa7Syf"]],[24,"scan-lines",false,33554432,2,[[1,-24,[5,1280,720]],[35,0,-25,10],[15,45,1920,960,-26]]],[3,"anchor",33554432,1,[-28],[[1,-27,[5,110,100]]],[1,-385,0,0]],[4,0,{},13,[6,"6fKL5Uz6xGgL/K84qa7Syf",null,null,-29,[7,"feJR/yJsNLOJk8mk5ofrYc",null,[[8,"Card",["_name"],4],[0,["_lpos"],4,[1,0,0,0]],[0,["_lrot"],4,[3,0,0,0,1]],[0,["_euler"],4,[1,0,0,0]]]],2]],[3,"anchor-001",33554432,1,[-31],[[1,-30,[5,110,100]]],[1,-275,0,0]],[4,0,{},15,[6,"6fKL5Uz6xGgL/K84qa7Syf",null,null,-32,[7,"9fcw3L6PpOfYyM1O6C4Xqz",null,[[8,"Card",["_name"],5],[0,["_lpos"],5,[1,0,0,0]],[0,["_lrot"],5,[3,0,0,0,1]],[0,["_euler"],5,[1,0,0,0]]]],3]],[3,"anchor-002",33554432,1,[-34],[[1,-33,[5,110,100]]],[1,-165,0,0]],[4,0,{},17,[6,"6fKL5Uz6xGgL/K84qa7Syf",null,null,-35,[7,"3fqhxyKmxIvpIxlCklRkf0",null,[[8,"Card",["_name"],6],[0,["_lpos"],6,[1,0,0,0]],[0,["_lrot"],6,[3,0,0,0,1]],[0,["_euler"],6,[1,0,0,0]]]],4]],[3,"anchor-003",33554432,1,[-37],[[1,-36,[5,110,100]]],[1,-55,0,0]],[4,0,{},19,[6,"6fKL5Uz6xGgL/K84qa7Syf",null,null,-38,[7,"e2haeReDpJG5vf5GKQWmue",null,[[8,"Card",["_name"],7],[0,["_lpos"],7,[1,0,0,0]],[0,["_lrot"],7,[3,0,0,0,1]],[0,["_euler"],7,[1,0,0,0]]]],5]],[3,"anchor-004",33554432,1,[-40],[[1,-39,[5,110,100]]],[1,55,0,0]],[4,0,{},21,[6,"6fKL5Uz6xGgL/K84qa7Syf",null,null,-41,[7,"ddwNRdqSxK0ZGAXn0VaQ/C",null,[[8,"Card",["_name"],8],[0,["_lpos"],8,[1,0,0,0]],[0,["_lrot"],8,[3,0,0,0,1]],[0,["_euler"],8,[1,0,0,0]]]],6]],[3,"anchor-005",33554432,1,[-43],[[1,-42,[5,110,100]]],[1,165,0,0]],[4,0,{},23,[6,"6fKL5Uz6xGgL/K84qa7Syf",null,null,-44,[7,"32nHO87QFP3LKo9Hzc0nXn",null,[[8,"Card",["_name"],9],[0,["_lpos"],9,[1,0,0,0]],[0,["_lrot"],9,[3,0,0,0,1]],[0,["_euler"],9,[1,0,0,0]]]],7]],[3,"anchor-006",33554432,1,[-46],[[1,-45,[5,110,100]]],[1,275,0,0]],[4,0,{},25,[6,"6fKL5Uz6xGgL/K84qa7Syf",null,null,-47,[7,"22AagqRjtAEqfe6famENMD",null,[[8,"Card",["_name"],10],[0,["_lpos"],10,[1,0,0,0]],[0,["_lrot"],10,[3,0,0,0,1]],[0,["_euler"],10,[1,0,0,0]]]],8]],[3,"anchor-007",33554432,1,[-49],[[1,-48,[5,110,100]]],[1,385,0,0]],[4,0,{},27,[6,"6fKL5Uz6xGgL/K84qa7Syf",null,null,-50,[7,"2eVtz6sXNMwpYZBXKyoGg2",null,[[8,"Card",["_name"],11],[0,["_lpos"],11,[1,0,0,0]],[0,["_lrot"],11,[3,0,0,0,1]],[0,["_euler"],11,[1,0,0,0]]]],9]],[39,"main",[2],[38,null,null,"359f1e5e-bd14-4a40-bcdd-50978b1c9776",null,null,[14,16,18,20,22,24,26,28]],[40,[41,[2,0,0,0,0.520833125],[2,0,0,0,0]],[42,[4,4283190348],[0,512,512]],[43],[44],[45],[46,false],[47],[48]]],[28,"Camera",2,[-51],[1,0,0,1000]],[49,0,402.5263157894737,0,2000,1108344832,30,[4,7968305]],[10,"card-visual-container",33554432,2,[[14,-52]]],[10,"hover-card-visual-container",33554432,2,[[14,-53]]]],0,[0,0,1,0,0,1,0,0,1,0,-1,13,0,-2,15,0,-3,17,0,-4,19,0,-5,21,0,-6,23,0,-7,25,0,-8,27,0,0,2,0,8,31,0,0,2,0,0,2,0,-1,30,0,-2,3,0,-4,32,0,-5,33,0,-6,12,0,0,3,0,0,3,0,0,3,0,0,12,0,0,12,0,0,12,0,0,13,0,-1,14,0,1,14,0,0,15,0,-1,16,0,1,16,0,0,17,0,-1,18,0,1,18,0,0,19,0,-1,20,0,1,20,0,0,21,0,-1,22,0,1,22,0,0,23,0,-1,24,0,1,24,0,0,25,0,-1,26,0,1,26,0,0,27,0,-1,28,0,1,28,0,-1,31,0,0,32,0,0,33,0,9,29,1,5,2,2,5,29,53],[0,0,0,0,0,0,0,0,0,0,0],[10,4,2,2,2,2,2,2,2,2,4],[4,5,0,0,0,0,0,0,0,0,6]],[[[50,"negative",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[6],[7]],[[{"name":"scan-lines","rect":{"x":0,"y":0,"width":1920,"height":960},"offset":{"x":0,"y":0},"originalSize":{"width":1920,"height":960},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-960,-480,0,960,-480,0,-960,480,0,960,480,0],"indexes":[0,1,2,2,1,3],"uv":[0,960,1920,960,0,0,1920,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-960,"y":-480,"z":0},"maxPos":{"x":960,"y":480,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[8]],[[[51,"background",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{"blendDst":1}]}}],[{"USE_TEXTURE":true}],[[[{},"sampleTexture",6,0]],11]]],0,0,[0,0],[11,6],[9,10]],[[{"name":"11d","rect":{"x":6,"y":10,"width":520,"height":751},"offset":{"x":-0.5,"y":-3.5},"originalSize":{"width":533,"height":764},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-260,-375.5,0,260,-375.5,0,-260,375.5,0,260,375.5,0],"indexes":[0,1,2,2,1,3],"uv":[6,754,526,754,6,3,526,3],"nuv":[0.01125703564727955,0.003926701570680628,0.9868667917448405,0.003926701570680628,0.01125703564727955,0.9869109947643979,0.9868667917448405,0.9869109947643979],"minPos":{"x":-260,"y":-375.5,"z":0},"maxPos":{"x":260,"y":375.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[11]],[[[16,"Card"],[25,"Card",33554432,[[11,-2,[2,"26d28aL3JJc4ew2fBv+74h"]],[52,-3,[2,"dcF+Rgkb5PSqbL0ME0CM5u"],0]],[9,"6fKL5Uz6xGgL/K84qa7Syf",null,null,null,-1,0]]],0,[0,1,1,0,0,1,0,0,1,0,7,1,3],[0],[12],[12]],[[[17,"../material/effect/negative",[{}],[{"hash":758611180,"name":"../material/effect/negative|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"rotation","type":14,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"sampleType":0,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"rotation","type":14,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec2 twirlUV(vec2 uv, vec2 center, float strength, vec2 offset) {\n  vec2 delta = uv - center;\n  float dist = length(delta);\n  float angle = strength * dist;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  vec2 rotated = vec2(\n      delta.x * cosA - delta.y * sinA,\n      delta.x * sinA + delta.y * cosA\n  );\n  return center + rotated + offset;\n}\nvec2 TillingAndOffset (vec2 uv, vec2 tilling, vec2 offset) {\n  return uv * tilling + offset;\n}\nvec2 hashTchou(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\nvec2 voronoiRandom(vec2 uv, float offset) {\n    vec2 h = hashTchou(uv);\n    return vec2(sin(h.y * offset), cos(h.x * offset)) * 0.5 + 0.5;\n}\nvec2 voronoi(vec2 uv, float angleOffset, float cellDensity) {\n    vec2 g = floor(uv * cellDensity);\n    vec2 f = fract(uv * cellDensity);\n    float minDist = 8.0;\n    vec2 bestOffset = vec2(0.0);\n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n            vec2 lattice = vec2(float(x), float(y));\n            vec2 randOffset = voronoiRandom(g + lattice, angleOffset);\n            float d = distance(lattice + randOffset, f);\n            if (d < minDist) {\n                minDist = d;\n                bestOffset = randOffset;\n            }\n        }\n    }\n    return vec2(minDist, bestOffset.x);\n}\nvec3 contrast(vec3 In, float Contrast) {\n    float midpoint = pow(0.5, 2.2);\n    return (In - midpoint) * Contrast + midpoint;\n}\nvec4 invertColor(vec4 In, vec4 InvertColors) {\n    return abs(InvertColors - In);\n}\nvec3 saturation(vec3 In, float Saturation) {\n    float luma = dot(In, vec3(0.2126729, 0.7151522, 0.0721750));\n    return vec3(luma) + Saturation * (In - vec3(luma));\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec2 rotation;\n};\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  vec2 twirl = twirlUV(uv0, vec2(0.5, 0.5), 0.68, rotation);\n  vec2 tiling = TillingAndOffset(twirl, vec2(2.79, 1), vec2(2.29, 0));\n  float voro = pow(voronoi(tiling, 0., 0.28).x, 4.);\n  float smoothStep = smoothstep(0.04, 0.14, voro);\n  vec4 cardTexture = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n  vec4 cardInvert = invertColor(cardTexture, vec4(1., 1., 1., 0.));\n  vec3 cardContrast = contrast(cardInvert.rgb, 0.7);\n  vec3 colorMul = vec3(0.7783019, 0.8308094, 1.);\n  vec3 cardSaturation = saturation(cardContrast, 2.) * colorMul;\n  float smoothStepMul = pow(cardInvert.y, 0.5) * smoothStep * 2.;\n  float smoothStepMulAdd = smoothStepMul + cardTexture.x * voro * 0.3;\n  vec3 cardSaturationAdd = cardSaturation + smoothStepMulAdd;\n  vec3 cardSaturationMul = saturation(cardSaturation * smoothStepMulAdd, 5.);\n  vec3 cardContrast2 = contrast(cardSaturationMul + cardSaturationAdd, 1.1);\n  o.rgb = cardContrast2;\n  o.a = cardTexture.a;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec2 twirlUV(vec2 uv, vec2 center, float strength, vec2 offset) {\n  vec2 delta = uv - center;\n  float dist = length(delta);\n  float angle = strength * dist;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  vec2 rotated = vec2(\n      delta.x * cosA - delta.y * sinA,\n      delta.x * sinA + delta.y * cosA\n  );\n  return center + rotated + offset;\n}\nvec2 TillingAndOffset (vec2 uv, vec2 tilling, vec2 offset) {\n  return uv * tilling + offset;\n}\nvec2 hashTchou(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\nvec2 voronoiRandom(vec2 uv, float offset) {\n    vec2 h = hashTchou(uv);\n    return vec2(sin(h.y * offset), cos(h.x * offset)) * 0.5 + 0.5;\n}\nvec2 voronoi(vec2 uv, float angleOffset, float cellDensity) {\n    vec2 g = floor(uv * cellDensity);\n    vec2 f = fract(uv * cellDensity);\n    float minDist = 8.0;\n    vec2 bestOffset = vec2(0.0);\n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n            vec2 lattice = vec2(float(x), float(y));\n            vec2 randOffset = voronoiRandom(g + lattice, angleOffset);\n            float d = distance(lattice + randOffset, f);\n            if (d < minDist) {\n                minDist = d;\n                bestOffset = randOffset;\n            }\n        }\n    }\n    return vec2(minDist, bestOffset.x);\n}\nvec3 contrast(vec3 In, float Contrast) {\n    float midpoint = pow(0.5, 2.2);\n    return (In - midpoint) * Contrast + midpoint;\n}\nvec4 invertColor(vec4 In, vec4 InvertColors) {\n    return abs(InvertColors - In);\n}\nvec3 saturation(vec3 In, float Saturation) {\n    float luma = dot(In, vec3(0.2126729, 0.7151522, 0.0721750));\n    return vec3(luma) + Saturation * (In - vec3(luma));\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\n   uniform vec2 rotation;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  vec2 twirl = twirlUV(uv0, vec2(0.5, 0.5), 0.68, rotation);\n  vec2 tiling = TillingAndOffset(twirl, vec2(2.79, 1), vec2(2.29, 0));\n  float voro = pow(voronoi(tiling, 0., 0.28).x, 4.);\n  float smoothStep = smoothstep(0.04, 0.14, voro);\n  vec4 cardTexture = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n  vec4 cardInvert = invertColor(cardTexture, vec4(1., 1., 1., 0.));\n  vec3 cardContrast = contrast(cardInvert.rgb, 0.7);\n  vec3 colorMul = vec3(0.7783019, 0.8308094, 1.);\n  vec3 cardSaturation = saturation(cardContrast, 2.) * colorMul;\n  float smoothStepMul = pow(cardInvert.y, 0.5) * smoothStep * 2.;\n  float smoothStepMulAdd = smoothStepMul + cardTexture.x * voro * 0.3;\n  vec3 cardSaturationAdd = cardSaturation + smoothStepMulAdd;\n  vec3 cardSaturationMul = saturation(cardSaturation * smoothStepMulAdd, 5.);\n  vec3 cardContrast2 = contrast(cardSaturationMul + cardSaturationAdd, 1.1);\n  o.rgb = cardContrast2;\n  o.a = cardTexture.a;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":44}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"IS_GRAY","type":"boolean"}]}],[{"passes":[{"program":"../material/effect/negative|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"rotation":{"type":14,"value":[0,0]}}}]}]]],0,0,[],[],[]],[[{"name":"default_sprite_splash_no_packable","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-1,-1,0,1,-1,0,-1,1,0,1,1,0],"indexes":[0,1,2,2,1,3],"uv":[0,2,2,2,0,0,2,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-1,"y":-1,"z":0},"maxPos":{"x":1,"y":1,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[3],[13]],[[[16,"CardVisual"],[26,"CardVisual",33554432,[-8],[[12,-2,[2,"ccJCxW5FtB244LanzTneVm"],[5,133,191]],[53,25,70,15,30,40,1.07,1.2,20,0.2,2.56,-7,[2,"6cjprvuFhHZ6AcROuH5ynz"],-6,-5,-4,-3,[1,2],[3,4,5],[18,1,[19,[0,0.5,1],[[54,2,4.750445632798574,0.8090930057473656,4.750445632798574],[55,2,1,0.16666666666666666,0.16666666666666666],[56,2,-4.659090909090905,-4.659090909090905,0.7941999485711235]]]],[18,1,[19,[0,1],[[20,1,-1,0.7453559924999299,-1,1],[20,-1,-2,1,-2,0.7453559924999299]]]]]],[9,"aeDETFPrxFh7YXsMfMAc9T",null,null,null,-1,0]],[13,"shake-anchor",33554432,1,[-10,-11],[[11,-9,[2,"e8N3gZLkNFt70MgxgLAjGK"]]],[9,"bdlIuoGAtGCI7O2v4C86t/",null,null,null,1,0]],[27,"shadow",33554432,2,[[12,-12,[2,"90P6LEj/NIxax3lWhV+o+B"],[5,133,191]],[36,0,-13,[2,"a1Kg3/cXxOaoLnn4k5W4Ja"],[4,2264924160],0],[57,-15,[2,"3eO52JM79OSIiVoGaHCkP/"],-14]],[9,"5d/eHVJTRNf6j4hVPOYgmb",null,null,null,1,0],[1,-3.823,-4.889,0]],[13,"tilt-anchor",33554432,2,[-17],[[11,-16,[2,"37ojW3eQBKj5q/23rUq+BA"]]],[9,"feISnPr8JN66plGaPpU4ke",null,null,null,1,0]],[29,"sprite",33554432,4,[[[12,-18,[2,"denVqvN9ZP0KnGv5tA6U1U"],[5,133,191]],-19],4,1],[9,"00f+WOCWtDnJP5L2AzdyEx",null,null,null,1,0]],[37,0,5,[2,"1c7OQMJwZP0YGmpIx/QTMz"]]],0,[0,1,1,0,0,1,0,13,3,0,14,6,0,15,4,0,16,2,0,0,1,0,-1,2,0,0,2,0,-1,3,0,-2,4,0,0,3,0,0,3,0,17,4,0,0,3,0,0,4,0,-1,5,0,0,5,0,-2,6,0,7,1,19],[0,0,0,0,0,0,6],[4,-1,-2,-1,-2,-3,4],[1,14,15,16,17,1,1]],[[[17,"../material/effect/background",[{}],[{"hash":1161956549,"name":"../material/effect/background|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"sampleTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"sampleType":0,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[{"name":"sampleTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nfloat noise_randomValue (vec2 uv)\n{\n  return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453);\n}\nfloat noise_interpolate (float a, float b, float t)\n{\n  return (1.0-t)*a + (t*b);\n}\nfloat simpleNoise_valueNoise (vec2 uv)\n{\n  vec2 i = floor(uv);\n  vec2 f = fract(uv);\n  f = f * f * (3.0 - 2.0 * f);\n  uv = abs(fract(uv) - 0.5);\n  vec2 c0 = i + vec2(0.0, 0.0);\n  vec2 c1 = i + vec2(1.0, 0.0);\n  vec2 c2 = i + vec2(0.0, 1.0);\n  vec2 c3 = i + vec2(1.0, 1.0);\n  float r0 = noise_randomValue(c0);\n  float r1 = noise_randomValue(c1);\n  float r2 = noise_randomValue(c2);\n  float r3 = noise_randomValue(c3);\n  float bottomOfGrid = noise_interpolate(r0, r1, f.x);\n  float topOfGrid = noise_interpolate(r2, r3, f.x);\n  float t = noise_interpolate(bottomOfGrid, topOfGrid, f.y);\n  return t;\n}\nfloat SimpleNoise (vec2 uv, float scale) {\n  float t = 0.0;\n  float freq = pow(2.0, 0.);\n  float amp = pow(0.5, 3.);\n  t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;\n  freq = pow(2.0, 1.);\n  amp = pow(0.5, 3.-1.);\n  t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;\n  freq = pow(2.0, 2.);\n  amp = pow(0.5, 3.-2.);\n  t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;\n  return t;\n}\nvec2 twirlUV(vec2 uv, vec2 center, float strength, vec2 offset) {\n  vec2 delta = uv - center;\n  float dist = length(delta);\n  float angle = strength * dist;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  vec2 rotated = vec2(\n      delta.x * cosA - delta.y * sinA,\n      delta.x * sinA + delta.y * cosA\n  );\n  return center + rotated + offset;\n}\nvec2 RotateCoordinates (vec2 uv, vec2 center, float rotation) {\n  uv -= center;\n  float s = sin(rotation);\n  float c = cos(rotation);\n  mat2 rMatrix = mat2(c, -s, s, c);\n  rMatrix *= 0.5;\n  rMatrix += 0.5;\n  rMatrix = rMatrix*2. - 1.;\n  uv *= rMatrix;\n  uv += center;\n  return uv;\n}\nvec4 Posterize(vec4 In, vec4 Steps) {\n  return floor(In / (1. / Steps)) * (1. / Steps);\n}\nvec4 blendLinearBurn(vec4 baseColor, vec4 blendColor, float opacity) {\n    vec4 burned = baseColor + blendColor - 1.0;\n    return mix(baseColor, burned, opacity);\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nuniform sampler2D sampleTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  vec2 tiling = vec2(1.5, 1.);\n  float newTime= cc_time.w;\n  float time = newTime * 0.01;\n  vec2 uv = uv0 * tiling + vec2(1., -1.) * time;\n  float simpleNoise = SimpleNoise(uv, 16.2);\n  float cosTime = cos(time);\n  vec2 rotateCoord = RotateCoordinates(uv0, vec2(cosTime), time);\n  vec2 addedCoord = rotateCoord + simpleNoise;\n  vec2 twirl = twirlUV(addedCoord, vec2(0.5), 30., vec2(0.));\n  float simpleNoise2 = SimpleNoise(uv0, 31.3);\n  float powerNoise = pow(simpleNoise2, 2.14);\n  vec2 multiplyTwirlUV = twirl * powerNoise;\n  vec4 texture2 = CCSampleWithAlphaSeparated(sampleTexture, multiplyTwirlUV);\n  float simpleNoise3 = SimpleNoise(uv0, 52.8);\n  vec4 posterize = Posterize(vec4(simpleNoise3), vec4(2.1));\n  vec4 blend = blendLinearBurn(texture2, posterize, 0.05);\n  o.rgb = blend.rgb;\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nfloat noise_randomValue (vec2 uv)\n{\n  return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453);\n}\nfloat noise_interpolate (float a, float b, float t)\n{\n  return (1.0-t)*a + (t*b);\n}\nfloat simpleNoise_valueNoise (vec2 uv)\n{\n  vec2 i = floor(uv);\n  vec2 f = fract(uv);\n  f = f * f * (3.0 - 2.0 * f);\n  uv = abs(fract(uv) - 0.5);\n  vec2 c0 = i + vec2(0.0, 0.0);\n  vec2 c1 = i + vec2(1.0, 0.0);\n  vec2 c2 = i + vec2(0.0, 1.0);\n  vec2 c3 = i + vec2(1.0, 1.0);\n  float r0 = noise_randomValue(c0);\n  float r1 = noise_randomValue(c1);\n  float r2 = noise_randomValue(c2);\n  float r3 = noise_randomValue(c3);\n  float bottomOfGrid = noise_interpolate(r0, r1, f.x);\n  float topOfGrid = noise_interpolate(r2, r3, f.x);\n  float t = noise_interpolate(bottomOfGrid, topOfGrid, f.y);\n  return t;\n}\nfloat SimpleNoise (vec2 uv, float scale) {\n  float t = 0.0;\n  float freq = pow(2.0, 0.);\n  float amp = pow(0.5, 3.);\n  t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;\n  freq = pow(2.0, 1.);\n  amp = pow(0.5, 3.-1.);\n  t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;\n  freq = pow(2.0, 2.);\n  amp = pow(0.5, 3.-2.);\n  t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;\n  return t;\n}\nvec2 twirlUV(vec2 uv, vec2 center, float strength, vec2 offset) {\n  vec2 delta = uv - center;\n  float dist = length(delta);\n  float angle = strength * dist;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  vec2 rotated = vec2(\n      delta.x * cosA - delta.y * sinA,\n      delta.x * sinA + delta.y * cosA\n  );\n  return center + rotated + offset;\n}\nvec2 RotateCoordinates (vec2 uv, vec2 center, float rotation) {\n  uv -= center;\n  float s = sin(rotation);\n  float c = cos(rotation);\n  mat2 rMatrix = mat2(c, -s, s, c);\n  rMatrix *= 0.5;\n  rMatrix += 0.5;\n  rMatrix = rMatrix*2. - 1.;\n  uv *= rMatrix;\n  uv += center;\n  return uv;\n}\nvec4 Posterize(vec4 In, vec4 Steps) {\n  return floor(In / (1. / Steps)) * (1. / Steps);\n}\nvec4 blendLinearBurn(vec4 baseColor, vec4 blendColor, float opacity) {\n    vec4 burned = baseColor + blendColor - 1.0;\n    return mix(baseColor, burned, opacity);\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nuniform sampler2D sampleTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  vec2 tiling = vec2(1.5, 1.);\n  float newTime= cc_time.w;\n  float time = newTime * 0.01;\n  vec2 uv = uv0 * tiling + vec2(1., -1.) * time;\n  float simpleNoise = SimpleNoise(uv, 16.2);\n  float cosTime = cos(time);\n  vec2 rotateCoord = RotateCoordinates(uv0, vec2(cosTime), time);\n  vec2 addedCoord = rotateCoord + simpleNoise;\n  vec2 twirl = twirlUV(addedCoord, vec2(0.5), 30., vec2(0.));\n  float simpleNoise2 = SimpleNoise(uv0, 31.3);\n  float powerNoise = pow(simpleNoise2, 2.14);\n  vec2 multiplyTwirlUV = twirl * powerNoise;\n  vec4 texture2 = CCSampleWithAlphaSeparated(sampleTexture, multiplyTwirlUV);\n  float simpleNoise3 = SimpleNoise(uv0, 52.8);\n  vec4 posterize = Posterize(vec4(simpleNoise3), vec4(2.1));\n  vec4 blend = blendLinearBurn(texture2, posterize, 0.05);\n  o.rgb = blend.rgb;\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"IS_GRAY","type":"boolean"}]}],[{"passes":[{"program":"../material/effect/background|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"sampleTexture":{"value":"white","type":28}}}]}]]],0,0,[],[],[]]]]
